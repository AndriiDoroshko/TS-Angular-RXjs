import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { Component, NgModule } from '@angular/core';
import { FieldWrapper, FormlyModule } from '@ngx-formly/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ngx-formly/core';

function FormlyWrapperAddons_div_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 8);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.to.addonLeft.class);
} }
function FormlyWrapperAddons_div_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.to.addonLeft.text);
} }
const _c0 = function (a0) { return { cursor: a0 }; };
function FormlyWrapperAddons_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵlistener("click", function FormlyWrapperAddons_div_1_Template_div_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.addonLeftClick($event); });
    ɵngcc0.ɵɵtemplate(1, FormlyWrapperAddons_div_1_i_1_Template, 1, 1, "i", 6);
    ɵngcc0.ɵɵtemplate(2, FormlyWrapperAddons_div_1_span_2_Template, 2, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r0.to.addonLeft.onClick ? "pointer" : "inherit"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.addonLeft.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.to.addonLeft.text);
} }
function FormlyWrapperAddons_div_5_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 8);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r7.to.addonRight.class);
} }
function FormlyWrapperAddons_div_5_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.to.addonRight.text);
} }
function FormlyWrapperAddons_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵlistener("click", function FormlyWrapperAddons_div_5_Template_div_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.addonRightClick($event); });
    ɵngcc0.ɵɵtemplate(1, FormlyWrapperAddons_div_5_i_1_Template, 1, 1, "i", 6);
    ɵngcc0.ɵɵtemplate(2, FormlyWrapperAddons_div_5_span_2_Template, 2, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r2.to.addonRight.onClick ? "pointer" : "inherit"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.to.addonRight.class);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.to.addonRight.text);
} }
class FormlyWrapperAddons extends FieldWrapper {
    /**
     * @param {?} $event
     * @return {?}
     */
    addonRightClick($event) {
        if (this.to.addonRight.onClick) {
            this.to.addonRight.onClick(this.to, this, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    addonLeftClick($event) {
        if (this.to.addonLeft.onClick) {
            this.to.addonLeft.onClick(this.to, this, $event);
        }
    }
}
FormlyWrapperAddons.ɵfac = /*@__PURE__*/ function () { let ɵFormlyWrapperAddons_BaseFactory; return function FormlyWrapperAddons_Factory(t) { return (ɵFormlyWrapperAddons_BaseFactory || (ɵFormlyWrapperAddons_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyWrapperAddons)))(t || FormlyWrapperAddons); }; }();
FormlyWrapperAddons.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyWrapperAddons, selectors: [["formly-wrapper-addons"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 2, consts: [[1, "input-group"], ["class", "input-group-prepend", 3, "ngStyle", "click", 4, "ngIf"], [1, "input-addons"], ["fieldComponent", ""], ["class", "input-group-append", 3, "ngStyle", "click", 4, "ngIf"], [1, "input-group-prepend", 3, "ngStyle", "click"], ["class", "input-group-text", 3, "ngClass", 4, "ngIf"], ["class", "input-group-text", 4, "ngIf"], [1, "input-group-text", 3, "ngClass"], [1, "input-group-text"], [1, "input-group-append", 3, "ngStyle", "click"]], template: function FormlyWrapperAddons_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormlyWrapperAddons_div_1_Template, 3, 5, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementContainer(3, null, 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, FormlyWrapperAddons_div_5_Template, 3, 5, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.addonLeft);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.addonRight);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgClass], styles: ["[_nghost-%COMP%]     .input-group>:not(:first-child) .form-control{border-top-left-radius:0;border-bottom-left-radius:0}[_nghost-%COMP%]     .input-group>:not(:last-child) .form-control{border-top-right-radius:0;border-bottom-right-radius:0}[_nghost-%COMP%]     .input-group>.input-addons{position:relative;flex:1 1 auto;width:1%;margin-bottom:0}"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyWrapperAddons, [{
        type: Component,
        args: [{
                selector: 'formly-wrapper-addons',
                template: "<div class=\"input-group\">\n  <div class=\"input-group-prepend\" *ngIf=\"to.addonLeft\" [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n    (click)=\"addonLeftClick($event)\">\n    <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n    <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n  </div>\n  <div class=\"input-addons\">\n    <ng-container #fieldComponent></ng-container>\n  </div>\n  <div class=\"input-group-append\" *ngIf=\"to.addonRight\" [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n    (click)=\"addonRightClick($event)\">\n    <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n    <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n  </div>\n</div>\n",
                styles: [":host ::ng-deep .input-group>:not(:first-child) .form-control{border-top-left-radius:0;border-bottom-left-radius:0}:host ::ng-deep .input-group>:not(:last-child) .form-control{border-top-right-radius:0;border-bottom-right-radius:0}:host ::ng-deep .input-group>.input-addons{position:relative;flex:1 1 auto;width:1%;margin-bottom:0}"]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} field
 * @return {?}
 */
function addonsExtension(field) {
    if (!field.templateOptions || (field.wrappers && field.wrappers.indexOf('addons') !== -1)) {
        return;
    }
    if (field.templateOptions.addonLeft || field.templateOptions.addonRight) {
        field.wrappers = [...(field.wrappers || []), 'addons'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyBootstrapAddonsModule {
}
FormlyBootstrapAddonsModule.ɵfac = function FormlyBootstrapAddonsModule_Factory(t) { return new (t || FormlyBootstrapAddonsModule)(); };
FormlyBootstrapAddonsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlyBootstrapAddonsModule });
FormlyBootstrapAddonsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            ReactiveFormsModule,
            FormlyModule.forChild({
                wrappers: [
                    { name: 'addons', component: FormlyWrapperAddons },
                ],
                extensions: [
                    { name: 'addons', extension: { postPopulate: addonsExtension } },
                ]
            }),
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyBootstrapAddonsModule, [{
        type: NgModule,
        args: [{
                declarations: [FormlyWrapperAddons],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormlyModule.forChild({
                        wrappers: [
                            { name: 'addons', component: FormlyWrapperAddons },
                        ],
                        extensions: [
                            { name: 'addons', extension: { postPopulate: addonsExtension } },
                        ]
                    }),
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyBootstrapAddonsModule, { declarations: function () { return [FormlyWrapperAddons]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule, ɵngcc2.FormlyModule]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyBootstrapAddonsModule, addonsExtension as ɵb, FormlyWrapperAddons as ɵa };

//# sourceMappingURL=ngx-formly-bootstrap-addons.js.map